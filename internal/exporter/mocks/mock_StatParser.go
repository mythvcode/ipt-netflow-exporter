// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	statparser "github.com/mythvcode/ipt-netflow-exporter/internal/statparser"
	mock "github.com/stretchr/testify/mock"
)

// MockStatParser is an autogenerated mock type for the StatParser type
type MockStatParser struct {
	mock.Mock
}

type MockStatParser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStatParser) EXPECT() *MockStatParser_Expecter {
	return &MockStatParser_Expecter{mock: &_m.Mock}
}

// CollectAndMarshal provides a mock function with no fields
func (_m *MockStatParser) CollectAndMarshal() (statparser.Statistics, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CollectAndMarshal")
	}

	var r0 statparser.Statistics
	var r1 error
	if rf, ok := ret.Get(0).(func() (statparser.Statistics, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() statparser.Statistics); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(statparser.Statistics)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStatParser_CollectAndMarshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CollectAndMarshal'
type MockStatParser_CollectAndMarshal_Call struct {
	*mock.Call
}

// CollectAndMarshal is a helper method to define mock.On call
func (_e *MockStatParser_Expecter) CollectAndMarshal() *MockStatParser_CollectAndMarshal_Call {
	return &MockStatParser_CollectAndMarshal_Call{Call: _e.mock.On("CollectAndMarshal")}
}

func (_c *MockStatParser_CollectAndMarshal_Call) Run(run func()) *MockStatParser_CollectAndMarshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStatParser_CollectAndMarshal_Call) Return(_a0 statparser.Statistics, _a1 error) *MockStatParser_CollectAndMarshal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStatParser_CollectAndMarshal_Call) RunAndReturn(run func() (statparser.Statistics, error)) *MockStatParser_CollectAndMarshal_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStatParser creates a new instance of MockStatParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStatParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStatParser {
	mock := &MockStatParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
